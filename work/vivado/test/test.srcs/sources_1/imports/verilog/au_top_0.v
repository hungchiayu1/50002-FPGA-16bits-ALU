/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  reg [15:0] M_store1_d, M_store1_q = 1'h0;
  
  reg [15:0] M_store2_d, M_store2_q = 1'h0;
  
  wire [1-1:0] M_slowclock_value;
  counter_1 slowclock (
    .clk(clk),
    .rst(rst),
    .value(M_slowclock_value)
  );
  
  wire [16-1:0] M_autotester_out;
  autotest_2 autotester (
    .clk(M_slowclock_value),
    .rst(rst),
    .out(M_autotester_out)
  );
  
  wire [16-1:0] M_alu_test_out;
  wire [3-1:0] M_alu_test_zvn;
  reg [16-1:0] M_alu_test_a;
  reg [16-1:0] M_alu_test_b;
  reg [6-1:0] M_alu_test_alusignal;
  alu_3 alu_test (
    .a(M_alu_test_a),
    .b(M_alu_test_b),
    .alusignal(M_alu_test_alusignal),
    .out(M_alu_test_out),
    .zvn(M_alu_test_zvn)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_4 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam IDLE_state = 5'd0;
  localparam STORE1_state = 5'd1;
  localparam STORE2_state = 5'd2;
  localparam CALCULATE_state = 5'd3;
  localparam AUTO_state = 5'd4;
  localparam TESTADDER1_state = 5'd5;
  localparam TESTADDER2_state = 5'd6;
  localparam TESTADDER3_state = 5'd7;
  localparam TESTBOOL1_state = 5'd8;
  localparam TESTBOOL2_state = 5'd9;
  localparam TESTBOOL3_state = 5'd10;
  localparam TESTSHIFT1_state = 5'd11;
  localparam TESTSHIFT2_state = 5'd12;
  localparam TESTSHIFT3_state = 5'd13;
  localparam TESTCMP1_state = 5'd14;
  localparam TESTCMP2_state = 5'd15;
  localparam TESTCMP3_state = 5'd16;
  localparam PASS_state = 5'd17;
  localparam FAIL_state = 5'd18;
  
  reg [4:0] M_state_d, M_state_q = IDLE_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_store1_d = M_store1_q;
    M_store2_d = M_store2_q;
    
    io_sel = 4'hf;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_alu_test_alusignal = io_dip[16+0+5-:6];
    M_alu_test_a = 1'h0;
    M_alu_test_b = 1'h0;
    
    case (M_state_q)
      IDLE_state: begin
        if (io_button[0+0-:1]) begin
          M_state_d = STORE1_state;
        end
        if (io_button[3+0-:1]) begin
          M_state_d = AUTO_state;
        end
      end
      STORE1_state: begin
        io_led[8+7-:8] = io_dip[8+7-:8];
        io_led[0+7-:8] = io_dip[0+7-:8];
        if (io_button[1+0-:1]) begin
          M_store1_d[8+7-:8] = io_dip[8+7-:8];
          M_store1_d[0+7-:8] = io_dip[0+7-:8];
          M_state_d = STORE2_state;
        end
        if (io_button[4+0-:1]) begin
          M_state_d = IDLE_state;
        end
      end
      STORE2_state: begin
        io_led[8+7-:8] = io_dip[8+7-:8];
        io_led[0+7-:8] = io_dip[0+7-:8];
        if (io_button[2+0-:1]) begin
          M_store2_d[8+7-:8] = io_dip[8+7-:8];
          M_store2_d[0+7-:8] = io_dip[0+7-:8];
          M_state_d = CALCULATE_state;
        end
        if (io_button[4+0-:1]) begin
          M_state_d = IDLE_state;
        end
      end
      CALCULATE_state: begin
        M_alu_test_a = M_store1_q;
        M_alu_test_b = M_store2_q;
        M_alu_test_alusignal = io_dip[16+0+5-:6];
        io_led[8+7-:8] = M_alu_test_out[8+7-:8];
        io_led[0+7-:8] = M_alu_test_out[0+7-:8];
        io_led[16+0+0-:1] = M_alu_test_zvn[0+0-:1];
        io_led[16+1+0-:1] = M_alu_test_zvn[1+0-:1];
        io_led[16+2+0-:1] = M_alu_test_zvn[2+0-:1];
        if (io_button[4+0-:1]) begin
          M_state_d = IDLE_state;
        end
      end
      AUTO_state: begin
        if (io_button[0+0-:1]) begin
          io_led[8+7-:8] = M_autotester_out[8+7-:8];
          io_led[0+7-:8] = M_autotester_out[0+7-:8];
        end
        if (io_button[4+0-:1]) begin
          M_state_d = IDLE_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_store1_q <= M_store1_d;
  end
  
  
  always @(posedge clk) begin
    M_store2_q <= M_store2_d;
  end
  
  
  always @(posedge clk) begin
    M_state_q <= M_state_d;
  end
  
endmodule
