/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module autotest_2 (
    input clk,
    input rst,
    output reg [15:0] out
  );
  
  
  
  wire [16-1:0] M_alu_test_out;
  wire [3-1:0] M_alu_test_zvn;
  reg [16-1:0] M_alu_test_a;
  reg [16-1:0] M_alu_test_b;
  reg [6-1:0] M_alu_test_alusignal;
  alu_3 alu_test (
    .a(M_alu_test_a),
    .b(M_alu_test_b),
    .alusignal(M_alu_test_alusignal),
    .out(M_alu_test_out),
    .zvn(M_alu_test_zvn)
  );
  
  localparam T1_state = 3'd0;
  localparam T2_state = 3'd1;
  localparam T3_state = 3'd2;
  localparam S1_state = 3'd3;
  localparam S2_state = 3'd4;
  localparam S3_state = 3'd5;
  localparam ERROR_state = 3'd6;
  localparam GOOD_state = 3'd7;
  
  reg [2:0] M_state_d, M_state_q = T1_state;
  wire [3-1:0] M_ctr_value;
  counter_5 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  reg [26:0] M_counter_d, M_counter_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_alu_test_a = 1'h0;
    M_alu_test_b = 1'h0;
    out = 1'h0;
    M_alu_test_alusignal = 1'h0;
    if (M_counter_q == 1'h0) begin
      
      case (M_state_q)
        T1_state: begin
          M_alu_test_a = 16'h1555;
          M_alu_test_b = 16'h2aab;
          M_alu_test_alusignal = 6'h00;
          out = M_alu_test_out;
          if (M_alu_test_out == 16'h4000) begin
            M_state_d = T2_state;
          end else begin
            M_state_d = ERROR_state;
          end
        end
        T2_state: begin
          M_alu_test_a = 16'hf0e0;
          M_alu_test_b = 16'h0020;
          M_alu_test_alusignal = 6'h01;
          out = M_alu_test_out;
          if (M_alu_test_out == 16'hf0c0) begin
            M_state_d = GOOD_state;
          end else begin
            M_state_d = ERROR_state;
          end
        end
        GOOD_state: begin
          out = 16'hffff;
        end
        ERROR_state: begin
          out = 58'h238d4350e5ef1c7;
        end
      endcase
      M_counter_d = M_counter_q + 1'h1;
    end
  end
  
  always @(posedge clk) begin
    M_counter_q <= M_counter_d;
    
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
