/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_3 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alusignal,
    output reg [15:0] out,
    output reg [2:0] zvn
  );
  
  
  
  wire [16-1:0] M_alu_add_s;
  wire [1-1:0] M_alu_add_z;
  wire [1-1:0] M_alu_add_v;
  wire [1-1:0] M_alu_add_n;
  reg [16-1:0] M_alu_add_a;
  reg [16-1:0] M_alu_add_b;
  reg [6-1:0] M_alu_add_alusignal;
  adder_6 alu_add (
    .a(M_alu_add_a),
    .b(M_alu_add_b),
    .alusignal(M_alu_add_alusignal),
    .s(M_alu_add_s),
    .z(M_alu_add_z),
    .v(M_alu_add_v),
    .n(M_alu_add_n)
  );
  
  wire [16-1:0] M_alu_shift_out;
  reg [16-1:0] M_alu_shift_a;
  reg [16-1:0] M_alu_shift_b;
  reg [6-1:0] M_alu_shift_alusignal;
  shifter_7 alu_shift (
    .a(M_alu_shift_a),
    .b(M_alu_shift_b),
    .alusignal(M_alu_shift_alusignal),
    .out(M_alu_shift_out)
  );
  
  wire [16-1:0] M_alu_compare_out;
  reg [1-1:0] M_alu_compare_z;
  reg [1-1:0] M_alu_compare_v;
  reg [1-1:0] M_alu_compare_n;
  reg [6-1:0] M_alu_compare_alusignal;
  comparator_8 alu_compare (
    .z(M_alu_compare_z),
    .v(M_alu_compare_v),
    .n(M_alu_compare_n),
    .alusignal(M_alu_compare_alusignal),
    .out(M_alu_compare_out)
  );
  
  wire [16-1:0] M_alu_boolean_out;
  reg [16-1:0] M_alu_boolean_a;
  reg [16-1:0] M_alu_boolean_b;
  reg [6-1:0] M_alu_boolean_alusignal;
  boolean_9 alu_boolean (
    .a(M_alu_boolean_a),
    .b(M_alu_boolean_b),
    .alusignal(M_alu_boolean_alusignal),
    .out(M_alu_boolean_out)
  );
  
  reg z;
  
  reg v;
  
  reg n;
  
  always @* begin
    M_alu_add_a = a;
    M_alu_add_b = b;
    M_alu_add_alusignal = alusignal;
    z = M_alu_add_z;
    v = M_alu_add_v;
    n = M_alu_add_n;
    zvn[0+0-:1] = z;
    zvn[1+0-:1] = v;
    zvn[2+0-:1] = n;
    M_alu_shift_a = a;
    M_alu_shift_b = b;
    M_alu_shift_alusignal = alusignal;
    M_alu_compare_v = v;
    M_alu_compare_z = z;
    M_alu_compare_n = n;
    M_alu_compare_alusignal = alusignal;
    M_alu_boolean_a = a;
    M_alu_boolean_b = b;
    M_alu_boolean_alusignal = alusignal;
    
    case (alusignal[4+1-:2])
      2'h0: begin
        out = M_alu_add_s;
      end
      2'h1: begin
        out = M_alu_compare_out;
      end
      2'h3: begin
        out = M_alu_shift_out;
      end
      2'h2: begin
        out = M_alu_boolean_out;
      end
      default: begin
        out = 16'h0000;
      end
    endcase
  end
endmodule
